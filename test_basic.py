#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è SuperWhisper Local
"""

import sys
import os
import unittest
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

class TestSuperWhisperComponents(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def test_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from src.config import Config
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists('config.yaml'):
            config = Config('config.yaml')
            self.assertIsNotNone(config.app)
            self.assertIsNotNone(config.models)
    
    def test_hotkey_manager_init(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        from src.hotkey_manager import HotkeyManager
        
        hotkey_manager = HotkeyManager()
        self.assertIsNotNone(hotkey_manager.logger)
        self.assertFalse(hotkey_manager.is_running)
    
    def test_notification_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from src.notification_service import NotificationService
        
        notification_service = NotificationService()
        self.assertIsNotNone(notification_service.logger)
    
    def test_punctuation_service_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏"""
        from src.punctuation_service import PunctuationService
        
        # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        mock_config = Mock()
        mock_config.models = {
            "punctuation": {"model_name": "test"}
        }
        
        service = PunctuationService(mock_config)
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = service._restore_basic("–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞")
        self.assertTrue(result[0].isupper())  # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
        self.assertTrue(result.endswith('.'))  # –¢–æ—á–∫–∞ –≤ –∫–æ–Ω—Ü–µ
    
    def test_audio_utils(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –∞—É–¥–∏–æ"""
        from src.utils import setup_logging
        
        # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        # –ï—Å–ª–∏ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π - —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
        self.assertTrue(True)

class TestSystemRequirements(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    
    def test_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        self.assertGreaterEqual(sys.version_info[:2], (3, 11))
    
    def test_required_packages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            import torch
            import numpy
            import yaml
            import pyperclip
            import pynput
            self.assertTrue(True)
        except ImportError as e:
            self.fail(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SuperWhisper Local")
    print("=" * 40)
    
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestSystemRequirements))
    suite.addTests(loader.loadTestsFromTestCase(TestSuperWhisperComponents))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    if result.wasSuccessful():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1) 